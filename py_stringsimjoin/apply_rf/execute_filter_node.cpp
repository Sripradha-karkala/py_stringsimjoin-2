/* Generated by Cython 0.23.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "extra_compile_args": [
            "-O3", 
            "-ffast-math", 
            "-march=native", 
            "-fopenmp"
        ], 
        "extra_link_args": [
            "-fopenmp"
        ], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__py_stringsimjoin__apply_rf__execute_filter_node
#define __PYX_HAVE_API__py_stringsimjoin__apply_rf__execute_filter_node
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include <string>
#include <utility>
#include <map>
#include "predicatecpp.h"
#include "inverted_index.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "py_stringsimjoin/apply_rf/execute_filter_node.pyx",
  "py_stringsimjoin/apply_rf/stringsource",
};

/*--- Type declarations ---*/

/* "py_stringsimjoin/apply_rf/utils.pxd":9
 * 
 * 
 * ctypedef double (*token_simfnptr)(const vector[int]&, const vector[int]&) nogil             # <<<<<<<<<<<<<<
 * ctypedef double (*str_simfnptr)(const string&, const string&) nogil
 * 
 */
typedef double (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr)(std::vector<int>  const &, std::vector<int>  const &);

/* "py_stringsimjoin/apply_rf/utils.pxd":10
 * 
 * ctypedef double (*token_simfnptr)(const vector[int]&, const vector[int]&) nogil
 * ctypedef double (*str_simfnptr)(const string&, const string&) nogil             # <<<<<<<<<<<<<<
 * 
 * ctypedef double (*simfnptr)(const vector[int]&, const vector[int]&) nogil
 */
typedef double (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr)(std::string const &, std::string const &);

/* "py_stringsimjoin/apply_rf/utils.pxd":12
 * ctypedef double (*str_simfnptr)(const string&, const string&) nogil
 * 
 * ctypedef double (*simfnptr)(const vector[int]&, const vector[int]&) nogil             # <<<<<<<<<<<<<<
 * ctypedef double (*simfnptr_str)(vector[string]&, vector[string]&) nogil
 * ctypedef bool (*compfnptr)(double, double) nogil
 */
typedef double (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr)(std::vector<int>  const &, std::vector<int>  const &);

/* "py_stringsimjoin/apply_rf/utils.pxd":13
 * 
 * ctypedef double (*simfnptr)(const vector[int]&, const vector[int]&) nogil
 * ctypedef double (*simfnptr_str)(vector[string]&, vector[string]&) nogil             # <<<<<<<<<<<<<<
 * ctypedef bool (*compfnptr)(double, double) nogil
 * 
 */
typedef double (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str)(std::vector<std::string>  &, std::vector<std::string>  &);

/* "py_stringsimjoin/apply_rf/utils.pxd":14
 * ctypedef double (*simfnptr)(const vector[int]&, const vector[int]&) nogil
 * ctypedef double (*simfnptr_str)(vector[string]&, vector[string]&) nogil
 * ctypedef bool (*compfnptr)(double, double) nogil             # <<<<<<<<<<<<<<
 * 
 * ctypedef double (*overlap_simfnptr)(const int&, const int&, const double&) nogil
 */
typedef bool (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr)(double, double);

/* "py_stringsimjoin/apply_rf/utils.pxd":16
 * ctypedef bool (*compfnptr)(double, double) nogil
 * 
 * ctypedef double (*overlap_simfnptr)(const int&, const int&, const double&) nogil             # <<<<<<<<<<<<<<
 * 
 * cdef int get_sim_type(const string&)
 */
typedef double (*__pyx_t_16py_stringsimjoin_8apply_rf_5utils_overlap_simfnptr)(int const &, int const &, double const &);

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'py_stringsimjoin.apply_rf.predicatecpp' */

/* Module declarations from 'py_stringsimjoin.apply_rf.tokenizers' */
static void (*__pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok)(PyObject *, PyObject *, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'py_stringsimjoin.apply_rf.inverted_index' */

/* Module declarations from 'py_stringsimjoin.apply_rf.utils' */
static int (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type)(std::string const &); /*proto*/
static __pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_function_str)(int const ); /*proto*/
static __pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_token_sim_function)(int const ); /*proto*/
static __pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_str_sim_function)(int const ); /*proto*/
static __pyx_t_16py_stringsimjoin_8apply_rf_5utils_overlap_simfnptr (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_overlap_sim_function)(int const ); /*proto*/
static int (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type)(std::string const &); /*proto*/
static __pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function)(int const ); /*proto*/
static int (*__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_tok_type)(std::string const &); /*proto*/

/* Module declarations from 'py_stringsimjoin.apply_rf.sim_functions' */
static double (*__pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_overlap)(std::vector<int>  const &, std::vector<int>  const &); /*proto*/

/* Module declarations from 'py_stringsimjoin.apply_rf.execute_filter_node' */
static void __pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filter_node_part(std::pair<int,int> , std::vector<std::pair<int,int> >  &, std::vector<int>  &, bool, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::string>  &, std::vector<std::string>  &, Predicatecpp &, int, int, std::vector<int>  &); /*proto*/
static void __pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filters_part(std::pair<int,int> , std::vector<std::pair<int,int> >  &, std::vector<int>  &, bool, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, std::vector<std::string>  &, std::vector<std::string>  &, std::vector<Predicatecpp>  &, std::vector<int>  &, std::vector<int>  &, std::vector<int>  &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "py_stringsimjoin.apply_rf.execute_filter_node"
int __pyx_module_is_main_py_stringsimjoin__apply_rf__execute_filter_node = 0;

/* Implementation of 'py_stringsimjoin.apply_rf.execute_filter_node' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_xrange;
static char __pyx_k_end[] = "end";
static char __pyx_k_file[] = "file";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_parallen_end[] = "parallen end";
static char __pyx_k_parallen_begin[] = "parallen begin";
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_s_parallen_begin;
static PyObject *__pyx_kp_s_parallen_end;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_xrange;

/* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":18
 * from py_stringsimjoin.apply_rf.sim_functions cimport overlap
 * 
 * cdef vector[int] execute_filter_node(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                                      vector[int]& pair_ids,
 *                                      bool top_level_node,
 */

static std::vector<int>  __pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filter_node(std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<int>  &__pyx_v_pair_ids, bool __pyx_v_top_level_node, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Predicatecpp __pyx_v_predicate, int __pyx_v_n_jobs, std::string const &__pyx_v_working_dir, bool __pyx_v_use_cache, std::map<std::string,std::vector<std::vector<int> > >  &__pyx_v_ltokens_cache, std::map<std::string,std::vector<std::vector<int> > >  &__pyx_v_rtokens_cache) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  std::vector<std::pair<int,int> >  __pyx_v_partitions;
  std::vector<int>  __pyx_v_final_output_pairs;
  std::vector<int>  __pyx_v_part_pairs;
  std::vector<std::vector<int> >  __pyx_v_output_pairs;
  int __pyx_v_n;
  int __pyx_v_start;
  int __pyx_v_end;
  int __pyx_v_i;
  PyObject *__pyx_v_partition_size = NULL;
  int __pyx_v_sim_type;
  int __pyx_v_comp_type;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  std::pair<int,int>  __pyx_t_8;
  std::vector<int>  __pyx_t_9;
  std::vector<std::vector<int> > ::iterator __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("execute_filter_node", 0);

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":29
 *                                      omap[string, vector[vector[int]]]& rtokens_cache):
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         if use_cache:
 *             ltokens = ltokens_cache[predicate.tokenizer_type]
 */
  __pyx_t_1 = (__pyx_v_predicate.is_tok_sim_measure != 0);
  if (__pyx_t_1) {

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":30
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:
 *         if use_cache:             # <<<<<<<<<<<<<<
 *             ltokens = ltokens_cache[predicate.tokenizer_type]
 *             rtokens = rtokens_cache[predicate.tokenizer_type]
 */
    __pyx_t_1 = (__pyx_v_use_cache != 0);
    if (__pyx_t_1) {

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":31
 *     if predicate.is_tok_sim_measure:
 *         if use_cache:
 *             ltokens = ltokens_cache[predicate.tokenizer_type]             # <<<<<<<<<<<<<<
 *             rtokens = rtokens_cache[predicate.tokenizer_type]
 *         else:
 */
      __pyx_v_ltokens = (__pyx_v_ltokens_cache[__pyx_v_predicate.tokenizer_type]);

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":32
 *         if use_cache:
 *             ltokens = ltokens_cache[predicate.tokenizer_type]
 *             rtokens = rtokens_cache[predicate.tokenizer_type]             # <<<<<<<<<<<<<<
 *         else:
 *             load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)
 */
      __pyx_v_rtokens = (__pyx_v_rtokens_cache[__pyx_v_predicate.tokenizer_type]);

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":30
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:
 *         if use_cache:             # <<<<<<<<<<<<<<
 *             ltokens = ltokens_cache[predicate.tokenizer_type]
 *             rtokens = rtokens_cache[predicate.tokenizer_type]
 */
      goto __pyx_L4;
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":34
 *             rtokens = rtokens_cache[predicate.tokenizer_type]
 *         else:
 *             load_tok(predicate.tokenizer_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] partitions
 *     cdef vector[int] final_output_pairs, part_pairs
 */
    /*else*/ {
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_predicate.tokenizer_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_t_2, __pyx_t_3, __pyx_v_ltokens, __pyx_v_rtokens, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L4:;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":29
 *                                      omap[string, vector[vector[int]]]& rtokens_cache):
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         if use_cache:
 *             ltokens = ltokens_cache[predicate.tokenizer_type]
 */
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":38
 *     cdef vector[int] final_output_pairs, part_pairs
 *     cdef vector[vector[int]] output_pairs
 *     cdef int n, start=0, end, i             # <<<<<<<<<<<<<<
 * 
 *     if top_level_node:
 */
  __pyx_v_start = 0;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":40
 *     cdef int n, start=0, end, i
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         n = candset.size()
 *     else:
 */
  __pyx_t_1 = (__pyx_v_top_level_node != 0);
  if (__pyx_t_1) {

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":41
 * 
 *     if top_level_node:
 *         n = candset.size()             # <<<<<<<<<<<<<<
 *     else:
 *         n = pair_ids.size()
 */
    __pyx_v_n = __pyx_v_candset.size();

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":40
 *     cdef int n, start=0, end, i
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         n = candset.size()
 *     else:
 */
    goto __pyx_L5;
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":43
 *         n = candset.size()
 *     else:
 *         n = pair_ids.size()             # <<<<<<<<<<<<<<
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)
 */
  /*else*/ {
    __pyx_v_n = __pyx_v_pair_ids.size();
  }
  __pyx_L5:;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":45
 *         n = pair_ids.size()
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_jobs):
 */
  if (unlikely(((float)__pyx_v_n_jobs) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(((int)(((float)__pyx_v_n) / ((float)__pyx_v_n_jobs)))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_partition_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":47
 *     partition_size = <int>(<float> n / <float> n_jobs)
 * 
 *     for i in range(n_jobs):             # <<<<<<<<<<<<<<
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 */
  __pyx_t_4 = __pyx_v_n_jobs;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":48
 * 
 *     for i in range(n_jobs):
 *         end = start + partition_size             # <<<<<<<<<<<<<<
 *         if end > n or i == n_jobs - 1:
 *             end = n
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_partition_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_end = __pyx_t_6;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":49
 *     for i in range(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    __pyx_t_7 = ((__pyx_v_end > __pyx_v_n) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_i == (__pyx_v_n_jobs - 1)) != 0);
    __pyx_t_1 = __pyx_t_7;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_1) {

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":50
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 *             end = n             # <<<<<<<<<<<<<<
 *         partitions.push_back(pair[int, int](start, end))
 * 
 */
      __pyx_v_end = __pyx_v_n;

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":49
 *     for i in range(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":51
 *         if end > n or i == n_jobs - 1:
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))             # <<<<<<<<<<<<<<
 * 
 *         start = end
 */
    try {
      __pyx_t_8 = std::pair<int,int> (__pyx_v_start, __pyx_v_end);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_partitions.push_back(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":53
 *         partitions.push_back(pair[int, int](start, end))
 * 
 *         start = end             # <<<<<<<<<<<<<<
 *         output_pairs.push_back(vector[int]())
 * 
 */
    __pyx_v_start = __pyx_v_end;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":54
 * 
 *         start = end
 *         output_pairs.push_back(vector[int]())             # <<<<<<<<<<<<<<
 * 
 *     cdef int sim_type, comp_type
 */
    try {
      __pyx_t_9 = std::vector<int> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_output_pairs.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":58
 *     cdef int sim_type, comp_type
 * 
 *     sim_type = get_sim_type(predicate.sim_measure_type)             # <<<<<<<<<<<<<<
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'
 */
  __pyx_v_sim_type = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type(__pyx_v_predicate.sim_measure_type);

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":59
 * 
 *     sim_type = get_sim_type(predicate.sim_measure_type)
 *     comp_type = get_comp_type(predicate.comp_op)             # <<<<<<<<<<<<<<
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):
 */
  __pyx_v_comp_type = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type(__pyx_v_predicate.comp_op);

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":60
 *     sim_type = get_sim_type(predicate.sim_measure_type)
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'             # <<<<<<<<<<<<<<
 *     for i in prange(n_jobs, nogil=True):
 *         execute_filter_node_part(partitions[i], candset, pair_ids, top_level_node,
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_parallen_begin) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":61
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         execute_filter_node_part(partitions[i], candset, pair_ids, top_level_node,
 *                                   ltokens, rtokens, lstrings, rstrings,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {
        __pyx_t_4 = __pyx_v_n_jobs;
        if (1 == 0) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_6 = (__pyx_t_4 - 0) / 1;
            if (__pyx_t_6 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                    #endif /* _OPENMP */
                    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5++){
                        {
                            __pyx_v_i = 0 + 1 * __pyx_t_5;

                            /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":62
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):
 *         execute_filter_node_part(partitions[i], candset, pair_ids, top_level_node,             # <<<<<<<<<<<<<<
 *                                   ltokens, rtokens, lstrings, rstrings,
 *                                   predicate, sim_type, comp_type,
 */
                            __pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filter_node_part((__pyx_v_partitions[__pyx_v_i]), __pyx_v_candset, __pyx_v_pair_ids, __pyx_v_top_level_node, __pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_v_predicate, __pyx_v_sim_type, __pyx_v_comp_type, (__pyx_v_output_pairs[__pyx_v_i]));
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":61
 *     comp_type = get_comp_type(predicate.comp_op)
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         execute_filter_node_part(partitions[i], candset, pair_ids, top_level_node,
 *                                   ltokens, rtokens, lstrings, rstrings,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L13;
        }
        __pyx_L13:;
      }
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":66
 *                                   predicate, sim_type, comp_type,
 *                                   output_pairs[i])
 *     print 'parallen end'             # <<<<<<<<<<<<<<
 *     for part_pairs in output_pairs:
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_parallen_end) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":67
 *                                   output_pairs[i])
 *     print 'parallen end'
 *     for part_pairs in output_pairs:             # <<<<<<<<<<<<<<
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 */
  __pyx_t_10 = __pyx_v_output_pairs.begin();
  for (;;) {
    if (!(__pyx_t_10 != __pyx_v_output_pairs.end())) break;
    __pyx_t_9 = *__pyx_t_10;
    ++__pyx_t_10;
    __pyx_v_part_pairs = __pyx_t_9;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":68
 *     print 'parallen end'
 *     for part_pairs in output_pairs:
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())             # <<<<<<<<<<<<<<
 * 
 *     return final_output_pairs
 */
    try {
      __pyx_v_final_output_pairs.insert(__pyx_v_final_output_pairs.end(), __pyx_v_part_pairs.begin(), __pyx_v_part_pairs.end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":67
 *                                   output_pairs[i])
 *     print 'parallen end'
 *     for part_pairs in output_pairs:             # <<<<<<<<<<<<<<
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 */
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":70
 *         final_output_pairs.insert(final_output_pairs.end(), part_pairs.begin(), part_pairs.end())
 * 
 *     return final_output_pairs             # <<<<<<<<<<<<<<
 * 
 * cdef void execute_filter_node_part(pair[int, int] partition,
 */
  __pyx_r = __pyx_v_final_output_pairs;
  goto __pyx_L0;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":18
 * from py_stringsimjoin.apply_rf.sim_functions cimport overlap
 * 
 * cdef vector[int] execute_filter_node(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                                      vector[int]& pair_ids,
 *                                      bool top_level_node,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("py_stringsimjoin.apply_rf.execute_filter_node.execute_filter_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_partition_size);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":72
 *     return final_output_pairs
 * 
 * cdef void execute_filter_node_part(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                    vector[pair[int, int]]& candset,
 *                                    vector[int]& pair_ids,
 */

static void __pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filter_node_part(std::pair<int,int>  __pyx_v_partition, std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<int>  &__pyx_v_pair_ids, bool __pyx_v_top_level_node, std::vector<std::vector<int> >  &__pyx_v_ltokens, std::vector<std::vector<int> >  &__pyx_v_rtokens, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, Predicatecpp &__pyx_v_predicate, int __pyx_v_sim_type, int __pyx_v_comp_type, std::vector<int>  &__pyx_v_output_pairs) {
  std::pair<int,int>  __pyx_v_cand;
  int __pyx_v_i;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr __pyx_v_str_sim_fn;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr __pyx_v_token_sim_fn;
  __pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr __pyx_v_comp_fn;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":89
 *     cdef str_simfnptr str_sim_fn
 *     cdef token_simfnptr token_sim_fn
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)             # <<<<<<<<<<<<<<
 * 
 *     if predicate.is_tok_sim_measure:
 */
  __pyx_v_comp_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function(__pyx_v_comp_type);

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":91
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 */
  __pyx_t_1 = (__pyx_v_predicate.is_tok_sim_measure != 0);
  if (__pyx_t_1) {

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":92
 * 
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)             # <<<<<<<<<<<<<<
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):
 */
    __pyx_v_token_sim_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_token_sim_function(__pyx_v_sim_type);

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":93
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 */
    __pyx_t_1 = (__pyx_v_top_level_node != 0);
    if (__pyx_t_1) {

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":94
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *                 cand  = candset[i]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 */
      __pyx_t_2 = __pyx_v_partition.second;
      for (__pyx_t_3 = __pyx_v_partition.first; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":95
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]             # <<<<<<<<<<<<<<
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                            predicate.threshold):
 */
        __pyx_v_cand = (__pyx_v_candset[__pyx_v_i]);

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":96
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)
 */
        __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_token_sim_fn((__pyx_v_ltokens[__pyx_v_cand.first]), (__pyx_v_rtokens[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
        if (__pyx_t_1) {

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":98
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(partition.first, partition.second):
 */
          try {
            __pyx_v_output_pairs.push_back(__pyx_v_i);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":96
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)
 */
        }
      }

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":93
 *     if predicate.is_tok_sim_measure:
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 */
      goto __pyx_L4;
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":100
 *                     output_pairs.push_back(i)
 *         else:
 *             for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 */
    /*else*/ {
      __pyx_t_2 = __pyx_v_partition.second;
      for (__pyx_t_3 = __pyx_v_partition.first; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":101
 *         else:
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]             # <<<<<<<<<<<<<<
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                            predicate.threshold):
 */
        __pyx_v_cand = (__pyx_v_candset[(__pyx_v_pair_ids[__pyx_v_i])]);

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":102
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])
 */
        __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_token_sim_fn((__pyx_v_ltokens[__pyx_v_cand.first]), (__pyx_v_rtokens[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
        if (__pyx_t_1) {

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":104
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])             # <<<<<<<<<<<<<<
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 */
          try {
            __pyx_v_output_pairs.push_back((__pyx_v_pair_ids[__pyx_v_i]));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":102
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(token_sim_fn(ltokens[cand.first], rtokens[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])
 */
        }
      }
    }
    __pyx_L4:;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":91
 *     cdef compfnptr comp_fn = get_comparison_function(comp_type)
 * 
 *     if predicate.is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         token_sim_fn = get_token_sim_function(sim_type)
 *         if top_level_node:
 */
    goto __pyx_L3;
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":106
 *                     output_pairs.push_back(pair_ids[i])
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)             # <<<<<<<<<<<<<<
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):
 */
  /*else*/ {
    __pyx_v_str_sim_fn = __pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_str_sim_function(__pyx_v_sim_type);

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":107
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 */
    __pyx_t_1 = (__pyx_v_top_level_node != 0);
    if (__pyx_t_1) {

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":108
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *                 cand  = candset[i]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 */
      __pyx_t_2 = __pyx_v_partition.second;
      for (__pyx_t_3 = __pyx_v_partition.first; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":109
 *         if top_level_node:
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]             # <<<<<<<<<<<<<<
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                            predicate.threshold):
 */
        __pyx_v_cand = (__pyx_v_candset[__pyx_v_i]);

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":110
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)
 */
        __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_str_sim_fn((__pyx_v_lstrings[__pyx_v_cand.first]), (__pyx_v_rstrings[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
        if (__pyx_t_1) {

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":112
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(partition.first, partition.second):
 */
          try {
            __pyx_v_output_pairs.push_back(__pyx_v_i);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":110
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(i)
 */
        }
      }

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":107
 *     else:
 *         str_sim_fn = get_str_sim_function(sim_type)
 *         if top_level_node:             # <<<<<<<<<<<<<<
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[i]
 */
      goto __pyx_L11;
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":114
 *                     output_pairs.push_back(i)
 *         else:
 *             for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 */
    /*else*/ {
      __pyx_t_2 = __pyx_v_partition.second;
      for (__pyx_t_3 = __pyx_v_partition.first; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
        __pyx_v_i = __pyx_t_3;

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":115
 *         else:
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]             # <<<<<<<<<<<<<<
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                            predicate.threshold):
 */
        __pyx_v_cand = (__pyx_v_candset[(__pyx_v_pair_ids[__pyx_v_i])]);

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":116
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])
 */
        __pyx_t_1 = (__pyx_v_comp_fn(__pyx_v_str_sim_fn((__pyx_v_lstrings[__pyx_v_cand.first]), (__pyx_v_rstrings[__pyx_v_cand.second])), __pyx_v_predicate.threshold) != 0);
        if (__pyx_t_1) {

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":118
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])             # <<<<<<<<<<<<<<
 * 
 * 
 */
          try {
            __pyx_v_output_pairs.push_back((__pyx_v_pair_ids[__pyx_v_i]));
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":116
 *             for i in range(partition.first, partition.second):
 *                 cand  = candset[pair_ids[i]]
 *                 if comp_fn(str_sim_fn(lstrings[cand.first], rstrings[cand.second]),             # <<<<<<<<<<<<<<
 *                            predicate.threshold):
 *                     output_pairs.push_back(pair_ids[i])
 */
        }
      }
    }
    __pyx_L11:;
  }
  __pyx_L3:;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":72
 *     return final_output_pairs
 * 
 * cdef void execute_filter_node_part(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                    vector[pair[int, int]]& candset,
 *                                    vector[int]& pair_ids,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("py_stringsimjoin.apply_rf.execute_filter_node.execute_filter_node_part", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":121
 * 
 * 
 * cdef vector[int] execute_filters(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                                  vector[int]& pair_ids,
 *                                  bool top_level_node,
 */

static std::vector<int>  __pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filters(std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<int>  &__pyx_v_pair_ids, bool __pyx_v_top_level_node, std::vector<std::string>  &__pyx_v_lstrings, std::vector<std::string>  &__pyx_v_rstrings, std::vector<Predicatecpp>  __pyx_v_predicates, int __pyx_v_n_jobs, std::string const &__pyx_v_working_dir, bool __pyx_v_use_cache, std::map<std::string,std::vector<std::vector<int> > >  &__pyx_v_ltokens_cache, std::map<std::string,std::vector<std::vector<int> > >  &__pyx_v_rtokens_cache) {
  std::vector<std::vector<int> >  __pyx_v_ltokens;
  std::vector<std::vector<int> >  __pyx_v_rtokens;
  std::vector<std::pair<int,int> >  __pyx_v_partitions;
  std::vector<int>  __pyx_v_final_output_pairs;
  std::vector<std::vector<int> >  __pyx_v_output_pairs;
  int __pyx_v_n;
  int __pyx_v_start;
  int __pyx_v_end;
  int __pyx_v_i;
  PyObject *__pyx_v_partition_size = NULL;
  std::vector<int>  __pyx_v_sim_types;
  std::vector<int>  __pyx_v_comp_types;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  std::pair<int,int>  __pyx_t_8;
  std::vector<int>  __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("execute_filters", 0);

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":132
 *                                  omap[string, vector[vector[int]]]& rtokens_cache):
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicates[0].is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         if use_cache:
 *             ltokens = ltokens_cache[predicates[0].tokenizer_type]
 */
  __pyx_t_1 = ((__pyx_v_predicates[0]).is_tok_sim_measure != 0);
  if (__pyx_t_1) {

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":133
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicates[0].is_tok_sim_measure:
 *         if use_cache:             # <<<<<<<<<<<<<<
 *             ltokens = ltokens_cache[predicates[0].tokenizer_type]
 *             rtokens = rtokens_cache[predicates[0].tokenizer_type]
 */
    __pyx_t_1 = (__pyx_v_use_cache != 0);
    if (__pyx_t_1) {

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":134
 *     if predicates[0].is_tok_sim_measure:
 *         if use_cache:
 *             ltokens = ltokens_cache[predicates[0].tokenizer_type]             # <<<<<<<<<<<<<<
 *             rtokens = rtokens_cache[predicates[0].tokenizer_type]
 *         else:
 */
      __pyx_v_ltokens = (__pyx_v_ltokens_cache[(__pyx_v_predicates[0]).tokenizer_type]);

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":135
 *         if use_cache:
 *             ltokens = ltokens_cache[predicates[0].tokenizer_type]
 *             rtokens = rtokens_cache[predicates[0].tokenizer_type]             # <<<<<<<<<<<<<<
 *         else:
 *             load_tok(predicates[0].tokenizer_type, working_dir, ltokens, rtokens)
 */
      __pyx_v_rtokens = (__pyx_v_rtokens_cache[(__pyx_v_predicates[0]).tokenizer_type]);

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":133
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicates[0].is_tok_sim_measure:
 *         if use_cache:             # <<<<<<<<<<<<<<
 *             ltokens = ltokens_cache[predicates[0].tokenizer_type]
 *             rtokens = rtokens_cache[predicates[0].tokenizer_type]
 */
      goto __pyx_L4;
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":137
 *             rtokens = rtokens_cache[predicates[0].tokenizer_type]
 *         else:
 *             load_tok(predicates[0].tokenizer_type, working_dir, ltokens, rtokens)             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] partitions
 *     cdef vector[int] final_output_pairs, part_pairs
 */
    /*else*/ {
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_predicates[0]).tokenizer_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_working_dir); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok(__pyx_t_2, __pyx_t_3, __pyx_v_ltokens, __pyx_v_rtokens, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L4:;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":132
 *                                  omap[string, vector[vector[int]]]& rtokens_cache):
 *     cdef vector[vector[int]] ltokens, rtokens
 *     if predicates[0].is_tok_sim_measure:             # <<<<<<<<<<<<<<
 *         if use_cache:
 *             ltokens = ltokens_cache[predicates[0].tokenizer_type]
 */
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":141
 *     cdef vector[int] final_output_pairs, part_pairs
 *     cdef vector[vector[int]] output_pairs
 *     cdef int n, start=0, end, i             # <<<<<<<<<<<<<<
 * 
 *     if top_level_node:
 */
  __pyx_v_start = 0;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":143
 *     cdef int n, start=0, end, i
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         n = candset.size()
 *     else:
 */
  __pyx_t_1 = (__pyx_v_top_level_node != 0);
  if (__pyx_t_1) {

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":144
 * 
 *     if top_level_node:
 *         n = candset.size()             # <<<<<<<<<<<<<<
 *     else:
 *         n = pair_ids.size()
 */
    __pyx_v_n = __pyx_v_candset.size();

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":143
 *     cdef int n, start=0, end, i
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         n = candset.size()
 *     else:
 */
    goto __pyx_L5;
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":146
 *         n = candset.size()
 *     else:
 *         n = pair_ids.size()             # <<<<<<<<<<<<<<
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)
 */
  /*else*/ {
    __pyx_v_n = __pyx_v_pair_ids.size();
  }
  __pyx_L5:;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":148
 *         n = pair_ids.size()
 * 
 *     partition_size = <int>(<float> n / <float> n_jobs)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_jobs):
 */
  if (unlikely(((float)__pyx_v_n_jobs) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(((int)(((float)__pyx_v_n) / ((float)__pyx_v_n_jobs)))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_partition_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":150
 *     partition_size = <int>(<float> n / <float> n_jobs)
 * 
 *     for i in range(n_jobs):             # <<<<<<<<<<<<<<
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 */
  __pyx_t_4 = __pyx_v_n_jobs;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":151
 * 
 *     for i in range(n_jobs):
 *         end = start + partition_size             # <<<<<<<<<<<<<<
 *         if end > n or i == n_jobs - 1:
 *             end = n
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_v_partition_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_end = __pyx_t_6;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":152
 *     for i in range(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    __pyx_t_7 = ((__pyx_v_end > __pyx_v_n) != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_7 = ((__pyx_v_i == (__pyx_v_n_jobs - 1)) != 0);
    __pyx_t_1 = __pyx_t_7;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_1) {

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":153
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:
 *             end = n             # <<<<<<<<<<<<<<
 *         partitions.push_back(pair[int, int](start, end))
 * 
 */
      __pyx_v_end = __pyx_v_n;

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":152
 *     for i in range(n_jobs):
 *         end = start + partition_size
 *         if end > n or i == n_jobs - 1:             # <<<<<<<<<<<<<<
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))
 */
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":154
 *         if end > n or i == n_jobs - 1:
 *             end = n
 *         partitions.push_back(pair[int, int](start, end))             # <<<<<<<<<<<<<<
 * 
 *         start = end
 */
    try {
      __pyx_t_8 = std::pair<int,int> (__pyx_v_start, __pyx_v_end);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_partitions.push_back(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":156
 *         partitions.push_back(pair[int, int](start, end))
 * 
 *         start = end             # <<<<<<<<<<<<<<
 *         output_pairs.push_back(vector[int]())
 * 
 */
    __pyx_v_start = __pyx_v_end;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":157
 * 
 *         start = end
 *         output_pairs.push_back(vector[int]())             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[int] sim_types, comp_types
 */
    try {
      __pyx_t_9 = std::vector<int> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    try {
      __pyx_v_output_pairs.push_back(__pyx_t_9);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":161
 *     cdef vector[int] sim_types, comp_types
 * 
 *     for i in range(predicates.size()):             # <<<<<<<<<<<<<<
 *         sim_types.push_back(get_sim_type(predicates[i].sim_measure_type))
 *         comp_types.push_back(get_comp_type(predicates[i].comp_op))
 */
  __pyx_t_10 = __pyx_v_predicates.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_10; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":162
 * 
 *     for i in range(predicates.size()):
 *         sim_types.push_back(get_sim_type(predicates[i].sim_measure_type))             # <<<<<<<<<<<<<<
 *         comp_types.push_back(get_comp_type(predicates[i].comp_op))
 * 
 */
    try {
      __pyx_v_sim_types.push_back(__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type((__pyx_v_predicates[__pyx_v_i]).sim_measure_type));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":163
 *     for i in range(predicates.size()):
 *         sim_types.push_back(get_sim_type(predicates[i].sim_measure_type))
 *         comp_types.push_back(get_comp_type(predicates[i].comp_op))             # <<<<<<<<<<<<<<
 * 
 *     print 'parallen begin'
 */
    try {
      __pyx_v_comp_types.push_back(__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type((__pyx_v_predicates[__pyx_v_i]).comp_op));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":165
 *         comp_types.push_back(get_comp_type(predicates[i].comp_op))
 * 
 *     print 'parallen begin'             # <<<<<<<<<<<<<<
 *     for i in prange(n_jobs, nogil=True):
 *         execute_filters_part(partitions[i], candset, pair_ids, top_level_node,
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_parallen_begin) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":166
 * 
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         execute_filters_part(partitions[i], candset, pair_ids, top_level_node,
 *                              ltokens, rtokens, lstrings, rstrings,
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      #endif
      /*try:*/ {
        __pyx_t_4 = __pyx_v_n_jobs;
        if (1 == 0) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_6 = (__pyx_t_4 - 0) / 1;
            if (__pyx_t_6 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                    #endif /* _OPENMP */
                    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5++){
                        {
                            __pyx_v_i = 0 + 1 * __pyx_t_5;

                            /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":167
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):
 *         execute_filters_part(partitions[i], candset, pair_ids, top_level_node,             # <<<<<<<<<<<<<<
 *                              ltokens, rtokens, lstrings, rstrings,
 *                              predicates, sim_types, comp_types, output_pairs[i])
 */
                            __pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filters_part((__pyx_v_partitions[__pyx_v_i]), __pyx_v_candset, __pyx_v_pair_ids, __pyx_v_top_level_node, __pyx_v_ltokens, __pyx_v_rtokens, __pyx_v_lstrings, __pyx_v_rstrings, __pyx_v_predicates, __pyx_v_sim_types, __pyx_v_comp_types, (__pyx_v_output_pairs[__pyx_v_i]));
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":166
 * 
 *     print 'parallen begin'
 *     for i in prange(n_jobs, nogil=True):             # <<<<<<<<<<<<<<
 *         execute_filters_part(partitions[i], candset, pair_ids, top_level_node,
 *                              ltokens, rtokens, lstrings, rstrings,
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L15;
        }
        __pyx_L15:;
      }
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":170
 *                              ltokens, rtokens, lstrings, rstrings,
 *                              predicates, sim_types, comp_types, output_pairs[i])
 *     print 'parallen end'             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_jobs):
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_parallen_end) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":172
 *     print 'parallen end'
 * 
 *     for i in range(n_jobs):             # <<<<<<<<<<<<<<
 *         final_output_pairs.insert(final_output_pairs.end(),
 *                                   output_pairs[i].begin(),
 */
  __pyx_t_6 = __pyx_v_n_jobs;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_6; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":173
 * 
 *     for i in range(n_jobs):
 *         final_output_pairs.insert(final_output_pairs.end(),             # <<<<<<<<<<<<<<
 *                                   output_pairs[i].begin(),
 *                                   output_pairs[i].end())
 */
    try {
      __pyx_v_final_output_pairs.insert(__pyx_v_final_output_pairs.end(), (__pyx_v_output_pairs[__pyx_v_i]).begin(), (__pyx_v_output_pairs[__pyx_v_i]).end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":177
 *                                   output_pairs[i].end())
 * 
 *     return final_output_pairs             # <<<<<<<<<<<<<<
 * 
 * cdef void execute_filters_part(pair[int, int] partition,
 */
  __pyx_r = __pyx_v_final_output_pairs;
  goto __pyx_L0;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":121
 * 
 * 
 * cdef vector[int] execute_filters(vector[pair[int, int]]& candset,             # <<<<<<<<<<<<<<
 *                                  vector[int]& pair_ids,
 *                                  bool top_level_node,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("py_stringsimjoin.apply_rf.execute_filter_node.execute_filters", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_partition_size);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":179
 *     return final_output_pairs
 * 
 * cdef void execute_filters_part(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                    vector[pair[int, int]]& candset,
 *                                    vector[int]& pair_ids,
 */

static void __pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filters_part(std::pair<int,int>  __pyx_v_partition, std::vector<std::pair<int,int> >  &__pyx_v_candset, std::vector<int>  &__pyx_v_pair_ids, bool __pyx_v_top_level_node, std::vector<std::vector<int> >  &__pyx_v_ltokens, std::vector<std::vector<int> >  &__pyx_v_rtokens, CYTHON_UNUSED std::vector<std::string>  &__pyx_v_lstrings, CYTHON_UNUSED std::vector<std::string>  &__pyx_v_rstrings, std::vector<Predicatecpp>  &__pyx_v_predicates, std::vector<int>  &__pyx_v_sim_types, std::vector<int>  &__pyx_v_comp_types, std::vector<int>  &__pyx_v_output_pairs) {
  std::pair<int,int>  __pyx_v_cand;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_size1;
  int __pyx_v_size2;
  double __pyx_v_overlap_score;
  bool __pyx_v_flag;
  std::vector<__pyx_t_16py_stringsimjoin_8apply_rf_5utils_overlap_simfnptr>  __pyx_v_token_sim_fns;
  std::vector<__pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr>  __pyx_v_comp_fns;
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":198
 *     cdef vector[compfnptr] comp_fns
 * 
 *     for i in range(sim_types.size()):             # <<<<<<<<<<<<<<
 *         token_sim_fns.push_back(get_overlap_sim_function(sim_types[i]))
 *         comp_fns.push_back(get_comparison_function(comp_types[i]))
 */
  __pyx_t_1 = __pyx_v_sim_types.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":199
 * 
 *     for i in range(sim_types.size()):
 *         token_sim_fns.push_back(get_overlap_sim_function(sim_types[i]))             # <<<<<<<<<<<<<<
 *         comp_fns.push_back(get_comparison_function(comp_types[i]))
 * 
 */
    try {
      __pyx_v_token_sim_fns.push_back(__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_overlap_sim_function((__pyx_v_sim_types[__pyx_v_i])));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":200
 *     for i in range(sim_types.size()):
 *         token_sim_fns.push_back(get_overlap_sim_function(sim_types[i]))
 *         comp_fns.push_back(get_comparison_function(comp_types[i]))             # <<<<<<<<<<<<<<
 * 
 *     if top_level_node:
 */
    try {
      __pyx_v_comp_fns.push_back(__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function((__pyx_v_comp_types[__pyx_v_i])));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":202
 *         comp_fns.push_back(get_comparison_function(comp_types[i]))
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]
 */
  __pyx_t_3 = (__pyx_v_top_level_node != 0);
  if (__pyx_t_3) {

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":203
 * 
 *     if top_level_node:
 *         for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *             cand  = candset[i]
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])
 */
    __pyx_t_2 = __pyx_v_partition.second;
    for (__pyx_t_4 = __pyx_v_partition.first; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":204
 *     if top_level_node:
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]             # <<<<<<<<<<<<<<
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])
 *             size1 = ltokens[cand.first].size()
 */
      __pyx_v_cand = (__pyx_v_candset[__pyx_v_i]);

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":205
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])             # <<<<<<<<<<<<<<
 *             size1 = ltokens[cand.first].size()
 *             size2 = rtokens[cand.second].size()
 */
      __pyx_v_overlap_score = __pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_overlap((__pyx_v_ltokens[__pyx_v_cand.first]), (__pyx_v_rtokens[__pyx_v_cand.second]));

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":206
 *             cand  = candset[i]
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])
 *             size1 = ltokens[cand.first].size()             # <<<<<<<<<<<<<<
 *             size2 = rtokens[cand.second].size()
 *             flag = True
 */
      __pyx_v_size1 = (__pyx_v_ltokens[__pyx_v_cand.first]).size();

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":207
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])
 *             size1 = ltokens[cand.first].size()
 *             size2 = rtokens[cand.second].size()             # <<<<<<<<<<<<<<
 *             flag = True
 *             for j in xrange(sim_types.size()):
 */
      __pyx_v_size2 = (__pyx_v_rtokens[__pyx_v_cand.second]).size();

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":208
 *             size1 = ltokens[cand.first].size()
 *             size2 = rtokens[cand.second].size()
 *             flag = True             # <<<<<<<<<<<<<<
 *             for j in xrange(sim_types.size()):
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),
 */
      __pyx_v_flag = 1;

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":209
 *             size2 = rtokens[cand.second].size()
 *             flag = True
 *             for j in xrange(sim_types.size()):             # <<<<<<<<<<<<<<
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),
 *                                    predicates[j].threshold):
 */
      __pyx_t_1 = __pyx_v_sim_types.size();
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_1; __pyx_t_5+=1) {
        __pyx_v_j = __pyx_t_5;

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":210
 *             flag = True
 *             for j in xrange(sim_types.size()):
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),             # <<<<<<<<<<<<<<
 *                                    predicates[j].threshold):
 *                     flag = False
 */
        __pyx_t_3 = ((!((__pyx_v_comp_fns[__pyx_v_j])((__pyx_v_token_sim_fns[__pyx_v_j])(__pyx_v_size1, __pyx_v_size2, __pyx_v_overlap_score), (__pyx_v_predicates[__pyx_v_j]).threshold) != 0)) != 0);
        if (__pyx_t_3) {

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":212
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),
 *                                    predicates[j].threshold):
 *                     flag = False             # <<<<<<<<<<<<<<
 *                     break
 *             if flag:
 */
          __pyx_v_flag = 0;

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":213
 *                                    predicates[j].threshold):
 *                     flag = False
 *                     break             # <<<<<<<<<<<<<<
 *             if flag:
 *                 output_pairs.push_back(i)
 */
          goto __pyx_L9_break;

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":210
 *             flag = True
 *             for j in xrange(sim_types.size()):
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),             # <<<<<<<<<<<<<<
 *                                    predicates[j].threshold):
 *                     flag = False
 */
        }
      }
      __pyx_L9_break:;

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":214
 *                     flag = False
 *                     break
 *             if flag:             # <<<<<<<<<<<<<<
 *                 output_pairs.push_back(i)
 *     else:
 */
      __pyx_t_3 = (__pyx_v_flag != 0);
      if (__pyx_t_3) {

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":215
 *                     break
 *             if flag:
 *                 output_pairs.push_back(i)             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(partition.first, partition.second):
 */
        try {
          __pyx_v_output_pairs.push_back(__pyx_v_i);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":214
 *                     flag = False
 *                     break
 *             if flag:             # <<<<<<<<<<<<<<
 *                 output_pairs.push_back(i)
 *     else:
 */
      }
    }

    /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":202
 *         comp_fns.push_back(get_comparison_function(comp_types[i]))
 * 
 *     if top_level_node:             # <<<<<<<<<<<<<<
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[i]
 */
    goto __pyx_L5;
  }

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":217
 *                 output_pairs.push_back(i)
 *     else:
 *         for i in range(partition.first, partition.second):             # <<<<<<<<<<<<<<
 *             cand  = candset[pair_ids[i]]
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_partition.second;
    for (__pyx_t_4 = __pyx_v_partition.first; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":218
 *     else:
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[pair_ids[i]]             # <<<<<<<<<<<<<<
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])
 *             size1 = ltokens[cand.first].size()
 */
      __pyx_v_cand = (__pyx_v_candset[(__pyx_v_pair_ids[__pyx_v_i])]);

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":219
 *         for i in range(partition.first, partition.second):
 *             cand  = candset[pair_ids[i]]
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])             # <<<<<<<<<<<<<<
 *             size1 = ltokens[cand.first].size()
 *             size2 = rtokens[cand.second].size()
 */
      __pyx_v_overlap_score = __pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_overlap((__pyx_v_ltokens[__pyx_v_cand.first]), (__pyx_v_rtokens[__pyx_v_cand.second]));

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":220
 *             cand  = candset[pair_ids[i]]
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])
 *             size1 = ltokens[cand.first].size()             # <<<<<<<<<<<<<<
 *             size2 = rtokens[cand.second].size()
 *             flag = True
 */
      __pyx_v_size1 = (__pyx_v_ltokens[__pyx_v_cand.first]).size();

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":221
 *             overlap_score = overlap(ltokens[cand.first], rtokens[cand.second])
 *             size1 = ltokens[cand.first].size()
 *             size2 = rtokens[cand.second].size()             # <<<<<<<<<<<<<<
 *             flag = True
 *             for j in xrange(sim_types.size()):
 */
      __pyx_v_size2 = (__pyx_v_rtokens[__pyx_v_cand.second]).size();

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":222
 *             size1 = ltokens[cand.first].size()
 *             size2 = rtokens[cand.second].size()
 *             flag = True             # <<<<<<<<<<<<<<
 *             for j in xrange(sim_types.size()):
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),
 */
      __pyx_v_flag = 1;

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":223
 *             size2 = rtokens[cand.second].size()
 *             flag = True
 *             for j in xrange(sim_types.size()):             # <<<<<<<<<<<<<<
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),
 *                                    predicates[j].threshold):
 */
      __pyx_t_1 = __pyx_v_sim_types.size();
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_1; __pyx_t_5+=1) {
        __pyx_v_j = __pyx_t_5;

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":224
 *             flag = True
 *             for j in xrange(sim_types.size()):
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),             # <<<<<<<<<<<<<<
 *                                    predicates[j].threshold):
 *                     flag = False
 */
        __pyx_t_3 = ((!((__pyx_v_comp_fns[__pyx_v_j])((__pyx_v_token_sim_fns[__pyx_v_j])(__pyx_v_size1, __pyx_v_size2, __pyx_v_overlap_score), (__pyx_v_predicates[__pyx_v_j]).threshold) != 0)) != 0);
        if (__pyx_t_3) {

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":226
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),
 *                                    predicates[j].threshold):
 *                     flag = False             # <<<<<<<<<<<<<<
 *                     break
 *             if flag:
 */
          __pyx_v_flag = 0;

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":227
 *                                    predicates[j].threshold):
 *                     flag = False
 *                     break             # <<<<<<<<<<<<<<
 *             if flag:
 *                 output_pairs.push_back(i)
 */
          goto __pyx_L15_break;

          /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":224
 *             flag = True
 *             for j in xrange(sim_types.size()):
 *                 if not comp_fns[j](token_sim_fns[j](size1, size2, overlap_score),             # <<<<<<<<<<<<<<
 *                                    predicates[j].threshold):
 *                     flag = False
 */
        }
      }
      __pyx_L15_break:;

      /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":228
 *                     flag = False
 *                     break
 *             if flag:             # <<<<<<<<<<<<<<
 *                 output_pairs.push_back(i)
 * 
 */
      __pyx_t_3 = (__pyx_v_flag != 0);
      if (__pyx_t_3) {

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":229
 *                     break
 *             if flag:
 *                 output_pairs.push_back(i)             # <<<<<<<<<<<<<<
 * 
 */
        try {
          __pyx_v_output_pairs.push_back(__pyx_v_i);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }

        /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":228
 *                     flag = False
 *                     break
 *             if flag:             # <<<<<<<<<<<<<<
 *                 output_pairs.push_back(i)
 * 
 */
      }
    }
  }
  __pyx_L5:;

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":179
 *     return final_output_pairs
 * 
 * cdef void execute_filters_part(pair[int, int] partition,             # <<<<<<<<<<<<<<
 *                                    vector[pair[int, int]]& candset,
 *                                    vector[int]& pair_ids,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("py_stringsimjoin.apply_rf.execute_filter_node.execute_filters_part", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 1);
  __pyx_L0:;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "execute_filter_node",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_s_parallen_begin, __pyx_k_parallen_begin, sizeof(__pyx_k_parallen_begin), 0, 0, 1, 0},
  {&__pyx_kp_s_parallen_end, __pyx_k_parallen_end, sizeof(__pyx_k_parallen_end), 0, 0, 1, 0},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initexecute_filter_node(void); /*proto*/
PyMODINIT_FUNC initexecute_filter_node(void)
#else
PyMODINIT_FUNC PyInit_execute_filter_node(void); /*proto*/
PyMODINIT_FUNC PyInit_execute_filter_node(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_execute_filter_node(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("execute_filter_node", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_py_stringsimjoin__apply_rf__execute_filter_node) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "py_stringsimjoin.apply_rf.execute_filter_node")) {
      if (unlikely(PyDict_SetItemString(modules, "py_stringsimjoin.apply_rf.execute_filter_node", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("execute_filter_node", (void (*)(void))__pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filter_node, "std::vector<int>  (std::vector<std::pair<int,int> >  &, std::vector<int>  &, bool, std::vector<std::string>  &, std::vector<std::string>  &, Predicatecpp, int, std::string const &, bool, std::map<std::string,std::vector<std::vector<int> > >  &, std::map<std::string,std::vector<std::vector<int> > >  &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("execute_filters", (void (*)(void))__pyx_f_16py_stringsimjoin_8apply_rf_19execute_filter_node_execute_filters, "std::vector<int>  (std::vector<std::pair<int,int> >  &, std::vector<int>  &, bool, std::vector<std::string>  &, std::vector<std::string>  &, std::vector<Predicatecpp> , int, std::string const &, bool, std::map<std::string,std::vector<std::vector<int> > >  &, std::map<std::string,std::vector<std::vector<int> > >  &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.tokenizers"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_1, "load_tok", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_10tokenizers_load_tok, "void (PyObject *, PyObject *, std::vector<std::vector<int> >  &, std::vector<std::vector<int> >  &, int __pyx_skip_dispatch)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.utils"); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "get_sim_type", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_type, "int (std::string const &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "get_sim_function_str", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_sim_function_str, "__pyx_t_16py_stringsimjoin_8apply_rf_5utils_simfnptr_str (int const )") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "get_token_sim_function", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_token_sim_function, "__pyx_t_16py_stringsimjoin_8apply_rf_5utils_token_simfnptr (int const )") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "get_str_sim_function", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_str_sim_function, "__pyx_t_16py_stringsimjoin_8apply_rf_5utils_str_simfnptr (int const )") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "get_overlap_sim_function", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_overlap_sim_function, "__pyx_t_16py_stringsimjoin_8apply_rf_5utils_overlap_simfnptr (int const )") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "get_comp_type", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comp_type, "int (std::string const &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "get_comparison_function", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_comparison_function, "__pyx_t_16py_stringsimjoin_8apply_rf_5utils_compfnptr (int const )") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "get_tok_type", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_5utils_get_tok_type, "int (std::string const &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_ImportModule("py_stringsimjoin.apply_rf.sim_functions"); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_3, "overlap", (void (**)(void))&__pyx_f_16py_stringsimjoin_8apply_rf_13sim_functions_overlap, "double (std::vector<int>  const &, std::vector<int>  const &)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "py_stringsimjoin/apply_rf/execute_filter_node.pyx":2
 * 
 * from cython.parallel import prange             # <<<<<<<<<<<<<<
 * 
 * from libcpp.vector cimport vector
 */
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init py_stringsimjoin.apply_rf.execute_filter_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init py_stringsimjoin.apply_rf.execute_filter_node");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
